generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  email          String             @unique
  createdAt      DateTime           @default(now())
  displayName    String
  color          String
  events         Event[]            @relation("owner")
  participations EventParticipant[]
  questions      Question[]
  upvotes        QuestionUpVote[]
  pollVotes      PollVote[]
  bookmarks      Event[]            @relation("bookmarks", fields: [bookmarkIds], references: [id])
  bookmarkIds    String[]           @db.ObjectId
  notifications  Notification[]
}

enum NotificationType {
  NEW_QUESTION
  QUESTION_UPVOTE
  QUESTION_RESOLVED
  QUESTION_PINNED
  POLL_CLOSED
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime         @default(now())
  read      Boolean          @default(false)
  seen      Boolean          @default(false)
  type      NotificationType

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @db.ObjectId

  question   Question? @relation(fields: [questionId], references: [id])
  questionId String?   @db.ObjectId

  poll   Poll?   @relation(fields: [pollId], references: [id])
  pollId String? @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Event {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  displayName      String
  slug             String
  shortDescription String?
  createdAt        DateTime           @default(now())
  participants     EventParticipant[]
  questions        Question[]
  polls            Poll[]
  bookmarkedBy     User[]             @relation("bookmarks", fields: [bookmarkedByIds], references: [id])
  bookmarkedByIds  String[]           @db.ObjectId
  notifications    Notification[]

  owner   User   @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String @db.ObjectId
}

model EventParticipant {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String @db.ObjectId

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}

model Question {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime         @default(now())
  body          String
  isPinned      Boolean          @default(false)
  isResolved    Boolean          @default(false)
  upvotes       QuestionUpVote[]
  notifications Notification[]

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String @db.ObjectId

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId
}

model QuestionUpVote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @db.ObjectId

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String @db.ObjectId
}

model Poll {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  body          String
  isLive        Boolean        @default(true)
  options       PollOption[]
  votes         PollVote[]
  notifications Notification[]

  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String @db.ObjectId
}

model PollOption {
  id    String     @id @default(auto()) @map("_id") @db.ObjectId
  index Int
  body  String
  votes PollVote[]

  poll   Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId String @db.ObjectId
}

model PollVote {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String     @db.ObjectId
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  pollOptionId String     @db.ObjectId
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId       String     @db.ObjectId
}
