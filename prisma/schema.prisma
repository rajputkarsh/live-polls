generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum NotificationType {
  COMMENT
  LIKE
  FOLLOW
  MENTION
}

model User {
  id              String               @unique
  email           String               @unique
  displayName     String
  color           String
  notifications   Notification[]
  bookmarks       UserBookmarksEvent[]
  events          Event[]              @relation("owner")
  participations  EventParticipant[]
  questions       Question[]           @relation("author")
  questionUpVotes QuestionUpVote[]
  pollVotes       PollVote[]
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
}

model Notification {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  seen       Boolean          @default(false)
  type       NotificationType
  event      Event?           @relation("NotificationEvent", fields: [eventId], references: [id]) // Relation name added
  eventId    String?          @db.ObjectId
  question   Question?        @relation("NotificationQuestion", fields: [questionId], references: [id]) // Relation name added
  questionId String?          @db.ObjectId
  poll       Poll?            @relation("NotificationPoll", fields: [pollId], references: [id]) // Relation name added
  pollId     String?          @db.ObjectId
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String           @db.ObjectId
}

model Event {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String               @unique
  owner         User                 @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId       String               @db.ObjectId
  participants  EventParticipant[]
  questions     Question[]
  polls         Poll[]
  notifications Notification[]       @relation("NotificationEvent")
  bookmarks     UserBookmarksEvent[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@unique([slug, ownerId])
}

model EventParticipant {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String @db.ObjectId
}

model Question {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  event         Event            @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId       String           @db.ObjectId
  author        User             @relation("author", fields: [authorId], references: [id])
  authorId      String           @db.ObjectId
  upVotes       QuestionUpVote[]
  notifications Notification[]   @relation("NotificationQuestion")
  createdAt     DateTime         @default(now())
  Poll          Poll[]
}

model QuestionUpVote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId String   @db.ObjectId
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId   String   @db.ObjectId
}

model Poll {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  question      Question       @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId    String         @db.ObjectId
  event         Event          @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId       String         @db.ObjectId
  options       PollOption[]
  notifications Notification[] @relation("NotificationPoll")
}

model PollOption {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  content String
  poll    Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pollId  String     @db.ObjectId
  votes   PollVote[]
}

model PollVote {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pollOptionId String     @db.ObjectId
  author       User       @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId     String     @db.ObjectId
}

model UserBookmarksEvent {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
}
